name: Test Docker Build

permissions:
  contents: read
  pull-requests: write
  security-events: write  # For uploading SARIF files

on:
  pull_request:
    branches:
      - main
    paths:
      - 'Dockerfile'
      - 'docker-compose.yml'
      - '.dockerignore'
      - 'package*.json'
      - 'apps/**'
      - 'packages/**'
      - 'tools/**'
      - '.github/workflows/docker-build-test.yml'

jobs:
  test-build:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run TypeScript type checking
        id: typecheck
        run: npm run check

      - name: Build application
        id: app-build
        run: npm run build

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Lint Dockerfile
        uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: Dockerfile
          ignore: DL3008,DL3009,DL3018  # DL3018: Pin versions in Alpine (not always practical)

      - name: Build Docker image
        id: build
        uses: docker/build-push-action@v6
        with:
          context: .
          platforms: linux/amd64
          push: false
          tags: |
            skymmich:test-${{ github.event.pull_request.number }}
            skymmich:test-${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          load: true  # Load image for local testing

      - name: Test Docker image structure
        run: |
          echo "## Docker Image Test Results 🧪" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Test if the image was built successfully
          if docker image inspect skymmich:test-${{ github.event.pull_request.number }} > /dev/null 2>&1; then
            echo "✅ **Image built successfully**" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Image build failed**" >> $GITHUB_STEP_SUMMARY
            exit 1
          fi
          
          # Check image size
          IMAGE_SIZE=$(docker image inspect skymmich:test-${{ github.event.pull_request.number }} --format='{{.Size}}' | numfmt --to=iec-i --suffix=B)
          echo "📦 **Image size:** $IMAGE_SIZE" >> $GITHUB_STEP_SUMMARY
          
          # Test if required directories exist
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Directory Structure Check" >> $GITHUB_STEP_SUMMARY
          docker run --rm skymmich:test-${{ github.event.pull_request.number }} ls -la /app/dist > /dev/null 2>&1 && echo "✅ /app/dist exists" >> $GITHUB_STEP_SUMMARY || echo "❌ /app/dist missing" >> $GITHUB_STEP_SUMMARY
          docker run --rm skymmich:test-${{ github.event.pull_request.number }} ls -la /app/config > /dev/null 2>&1 && echo "✅ /app/config exists" >> $GITHUB_STEP_SUMMARY || echo "❌ /app/config missing" >> $GITHUB_STEP_SUMMARY
          docker run --rm skymmich:test-${{ github.event.pull_request.number }} ls -la /app/logs > /dev/null 2>&1 && echo "✅ /app/logs exists" >> $GITHUB_STEP_SUMMARY || echo "❌ /app/logs missing" >> $GITHUB_STEP_SUMMARY
          docker run --rm skymmich:test-${{ github.event.pull_request.number }} ls -la /app/sidecars > /dev/null 2>&1 && echo "✅ /app/sidecars exists" >> $GITHUB_STEP_SUMMARY || echo "❌ /app/sidecars missing" >> $GITHUB_STEP_SUMMARY
          
          # Check if startup script is executable
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Startup Script Check" >> $GITHUB_STEP_SUMMARY
          docker run --rm --entrypoint="" skymmich:test-${{ github.event.pull_request.number }} test -x /app/startup.sh && echo "✅ startup.sh is executable" >> $GITHUB_STEP_SUMMARY || echo "❌ startup.sh is not executable" >> $GITHUB_STEP_SUMMARY

      - name: Run container smoke test
        id: smoke-test
        run: |
          # Start container with minimal config
          docker run -d \
            --name skymmich-test \
            -p 5000:5000 \
            -e NODE_ENV=production \
            -e DATABASE_URL=postgresql://test:test@localhost:5432/test \
            skymmich:test-${{ github.event.pull_request.number }}
          
          # Give it time to start (or fail)
          sleep 10
          
          # Check if container is still running
          if docker ps | grep -q skymmich-test; then
            echo "✅ Container started successfully" >> $GITHUB_STEP_SUMMARY
            docker logs skymmich-test
          else
            echo "❌ Container failed to start" >> $GITHUB_STEP_SUMMARY
            docker logs skymmich-test
            exit 1
          fi
          
          # Cleanup
          docker stop skymmich-test || true
          docker rm skymmich-test || true

      - name: Scan for vulnerabilities (SARIF)
        id: security-scan
        uses: aquasecurity/trivy-action@0.28.0
        with:
          image-ref: skymmich:test-${{ github.event.pull_request.number }}
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'
          exit-code: '0'  # Don't fail the build, just report vulnerabilities
          scan-type: 'image'
          hide-progress: false

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always() && hashFiles('trivy-results.sarif') != ''
        with:
          sarif_file: 'trivy-results.sarif'
          category: 'trivy-pr'

      - name: Generate vulnerability report
        uses: aquasecurity/trivy-action@master
        if: always()  # Generate report even if previous scan failed
        with:
          image-ref: skymmich:test-${{ github.event.pull_request.number }}
          format: 'table'
          severity: 'CRITICAL,HIGH,MEDIUM'
          output: 'trivy-report.txt'
          exit-code: '0'  # Don't fail, just generate report

      - name: Export Docker image as artifact
        if: success() || failure()  # Export even if security scan failed
        run: |
          docker save skymmich:test-${{ github.event.pull_request.number }} | gzip > skymmich-pr-${{ github.event.pull_request.number }}-${{ github.sha }}.tar.gz

      - name: Upload Docker image artifact
        if: success() || failure()
        uses: actions/upload-artifact@v4
        with:
          name: docker-image-pr-${{ github.event.pull_request.number }}
          path: skymmich-pr-${{ github.event.pull_request.number }}-${{ github.sha }}.tar.gz
          retention-days: 7

      - name: Create application snapshot
        if: success() || failure()
        run: |
          mkdir -p snapshot
          tar -czf snapshot/skymmich-snapshot-${{ github.sha }}.tar.gz \
            --exclude=node_modules \
            --exclude=.git \
            --exclude=snapshot \
            dist/

      - name: Upload application snapshot
        if: success() || failure()
        uses: actions/upload-artifact@v4
        with:
          name: app-snapshot-${{ github.sha }}
          path: snapshot/skymmich-snapshot-${{ github.sha }}.tar.gz
          retention-days: 7

      - name: Comment PR with results
        uses: actions/github-script@v7
        if: always() && github.event_name == 'pull_request'
        with:
          script: |
            const fs = require('fs');
            let vulnerabilitySection = '';
            let statusIcon = '✅';
            let statusText = 'All checks passed!';
            
            // Get step outcomes from context
            const stepOutcomes = {
              typecheck: '${{ steps.typecheck.outcome }}',
              appBuild: '${{ steps.app-build.outcome }}',
              dockerBuild: '${{ steps.build.outcome }}',
              smokeTest: '${{ steps.smoke-test.outcome }}',
              securityScan: '${{ steps.security-scan.outcome }}'
            };
            
            // Check if any steps failed
            const failedSteps = Object.entries(stepOutcomes).filter(([_, outcome]) => outcome !== 'success');
            if (failedSteps.length > 0) {
              statusIcon = '❌';
              statusText = `${failedSteps.length} step(s) failed`;
            }
            
            try {
              const trivyReport = fs.readFileSync('trivy-report.txt', 'utf8');
              if (trivyReport.trim()) {
                // Count vulnerabilities by severity
                const criticalCount = (trivyReport.match(/CRITICAL/g) || []).length;
                const highCount = (trivyReport.match(/HIGH/g) || []).length;
                const mediumCount = (trivyReport.match(/MEDIUM/g) || []).length;
                
                if (criticalCount > 0) {
                  statusIcon = '⚠️';
                  statusText = `${criticalCount} critical vulnerabilities found`;
                } else if (highCount > 0 && failedSteps.length === 0) {
                  statusText = `${highCount} high-severity vulnerabilities found`;
                }
                
                // Create a concise summary
                let summary = '';
                if (criticalCount > 0) summary += `🔴 **${criticalCount} Critical** `;
                if (highCount > 0) summary += `🟠 **${highCount} High** `;
                if (mediumCount > 0) summary += `🟡 **${mediumCount} Medium** `;
                
                if (summary) {
                  vulnerabilitySection = `\n\n### 🔍 Security Scan Summary\n${summary.trim()}\n\n📋 [View full vulnerability report in Actions log](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})`;
                } else {
                  vulnerabilitySection = '\n\n### 🔍 Security Scan\n✅ **No vulnerabilities found!**';
                }
              } else {
                vulnerabilitySection = '\n\n### 🔍 Security Scan\n✅ **No vulnerabilities found!**';
              }
            } catch (e) {
              vulnerabilitySection = '\n\n### 🔍 Security Scan\n⚠️ **Vulnerability scan report not available**';
            }
            
            const output = `#### Docker Build Test 🐳
            
            ${statusIcon} **${statusText}**
            
            ### 📋 Build Steps
            - TypeScript compilation: ${stepOutcomes.typecheck === 'success' ? '✅' : '❌'}
            - Application build: ${stepOutcomes.appBuild === 'success' ? '✅' : '❌'}
            - Docker image build: ${stepOutcomes.dockerBuild === 'success' ? '✅' : '❌'}
            - Container smoke test: ${stepOutcomes.smokeTest === 'success' ? '✅' : '❌'}
            ${vulnerabilitySection}
            
            ### 📦 Build Artifacts
            
            The following artifacts are available for download:
            - **Docker Image**: \`docker-image-pr-${{ github.event.pull_request.number }}\` (7 days retention)
            - **Application Snapshot**: \`app-snapshot-${{ github.sha }}\` (7 days retention)
            
            ---
            
            📊 [View detailed results](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}) • 🔒 [Security tab](${{ github.server_url }}/${{ github.repository }}/security/code-scanning) • Pushed by @${{ github.actor }}`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })