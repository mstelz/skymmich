name: Release

on:
  push:
    tags:
      - 'v*.*.*'  # Semantic versioning tags (e.g., v1.0.0, v2.1.3)

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository_owner }}/skymmich

jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write  # For creating releases
      packages: write  # For pushing to registry
      security-events: write  # For uploading SARIF files
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0  # Get full history for changelog generation

      - name: Validate tag format
        run: |
          if [[ ! "${{ github.ref_name }}" =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "Error: Tag must be in format v*.*.* (e.g., v1.0.0)"
            exit 1
          fi

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run TypeScript type checking
        run: npm run check

      - name: Build application
        run: npm run build

      - name: Create release archive
        run: |
          mkdir -p release
          tar -czf release/skymmich-${{ github.ref_name }}-dist.tar.gz dist/
          tar -czf release/skymmich-${{ github.ref_name }}-source.tar.gz \
            --exclude=node_modules \
            --exclude=dist \
            --exclude=.git \
            --exclude=release \
            .

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=raw,value=latest

      - name: Build Docker image (local)
        id: build-local
        uses: docker/build-push-action@v6
        with:
          context: .
          platforms: linux/amd64
          push: false
          load: true
          tags: local-scan:${{ github.ref_name }}
          cache-from: type=gha
          build-args: |
            BUILDTIME=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}
            VERSION=${{ github.ref_name }}
            REVISION=${{ github.sha }}

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@0.28.0
        with:
          image-ref: local-scan:${{ github.ref_name }}
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'
          exit-code: '1'  # Fail the release on critical vulnerabilities
          scan-type: 'image'
          hide-progress: false

      - name: Build and push Docker image (multi-arch)
        id: build
        uses: docker/build-push-action@v6
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILDTIME=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}
            VERSION=${{ github.ref_name }}
            REVISION=${{ github.sha }}

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always() && hashFiles('trivy-results.sarif') != ''
        with:
          sarif_file: 'trivy-results.sarif'
          category: 'trivy-release'

      - name: Generate SBOM
        uses: anchore/sbom-action@v0
        continue-on-error: true  # Don't fail release if SBOM generation fails
        with:
          image: local-scan:${{ github.ref_name }}  # Use same local image as Trivy scan
          format: spdx-json
          output-file: release/sbom-${{ github.ref_name }}.spdx.json

      - name: Generate changelog
        id: changelog
        run: |
          # Get the previous tag
          PREV_TAG=$(git describe --abbrev=0 --tags $(git rev-list --tags --skip=1 --max-count=1) 2>/dev/null || echo "")
          
          if [ -z "$PREV_TAG" ]; then
            echo "This is the first release" > changelog.md
          else
            echo "## What's Changed" > changelog.md
            echo "" >> changelog.md
            git log ${PREV_TAG}..HEAD --pretty=format:"* %s (%h)" >> changelog.md
          fi
          
          echo "" >> changelog.md
          echo "" >> changelog.md
          echo "**Full Changelog**: https://github.com/${{ github.repository }}/compare/${PREV_TAG}...${{ github.ref_name }}" >> changelog.md

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          name: Release ${{ github.ref_name }}
          body_path: changelog.md
          draft: false
          prerelease: false
          files: |
            release/skymmich-${{ github.ref_name }}-dist.tar.gz
            release/skymmich-${{ github.ref_name }}-source.tar.gz
            release/sbom-${{ github.ref_name }}.spdx.json
          generate_release_notes: true

      - name: Create deployment summary
        run: |
          echo "## Release Published ðŸŽ‰" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Version:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Image:** \`${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Docker Tags" >> $GITHUB_STEP_SUMMARY
          echo "${{ steps.meta.outputs.tags }}" | sed 's/^/- /' >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Release Artifacts" >> $GITHUB_STEP_SUMMARY
          echo "- Distribution archive: skymmich-${{ github.ref_name }}-dist.tar.gz" >> $GITHUB_STEP_SUMMARY
          echo "- Source archive: skymmich-${{ github.ref_name }}-source.tar.gz" >> $GITHUB_STEP_SUMMARY
          echo "- SBOM: sbom-${{ github.ref_name }}.spdx.json" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Security" >> $GITHUB_STEP_SUMMARY
          echo "âœ… Passed Trivy vulnerability scan" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Pull Command" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
          echo "docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY